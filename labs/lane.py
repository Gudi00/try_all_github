# const –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
col_columns = 4
number_surname = 0
number_name = 1
number_laba = 2
number_want = 3

#–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤
list = []
col_student = 30
was_the_last_person_to_respond = 5

# –≤–≤–≤–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

for i in range(0, col_student):
    list.append([])
    tmp = input('Enter info about group: ')
    list[i].append(tmp.split()[0])
    list[i].append(tmp.split()[1])
    list[i].append(int(tmp.split()[2]))
    list[i].append(int(tmp.split()[3]))
print("Success! all saved")

# –≤—ã—â–∏—Ç—ã–≤–∞–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–±
average_number_of_labs = 0
for i in range(0, col_student):
    average_number_of_labs += list[i][number_laba]
average_number_of_labs /= col_student
print("Average number of labs: ", average_number_of_labs)

# –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
mas_rez = []
for i in range(0, col_student):
    if list[i][number_laba] < average_number_of_labs-2 and list[i][number_want] == 1:
        mas_rez.append(list[i])

for i in range(0, col_student):
    number_for_check = (i+was_the_last_person_to_respond)%(col_student-1)
    if (list[number_for_check][number_laba] >= average_number_of_labs-2
            and list[i][number_want] == 1):
        mas_rez.append(list[number_for_check])

for i in range(0, len(mas_rez)):
    print(f"{i}. {mas_rez[i][number_surname]} {mas_rez[i][number_name]} {mas_rez[i][number_laba]}")

    #
    # # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã start
    # class Registration(StatesGroup):
    #     user_first_name = State()
    #     user_last_name = State()
    #     extended_information = State()
    #
    #
    # @router.message(CommandStart())
    # async def cmd_start(message: Message, state: FSMContext):
    #     # await message.answer("–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å, –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:",
    #     #                      reply_markup=types.ReplyKeyboardRemove()) #–ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å
    #     # await message.answer("–ò–æ—Å—å–∫–æ –ú–∏—Ö–∞–∏–ª	3	0")
    #     # await message.answer("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–∏–∫–æ–º –∏ –ø—Ä–µ–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —à–∞–±–ª–æ–Ω–∞: –ø—Ä–µ–≤—ã–µ 2 —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è, –ø–æ—Ç–æ–º –∏–¥—ë—Ç –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –ª–∞–±—ã –∏ –±—É–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç—Ä–∞–∂–∞–µ—Ç –∂–µ–ª–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å–¥–∞–≤–∞—Ç—å –ª–∞–±—É –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏")
    #     await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ")
    #     await rq.set_user(message.from_user.id)
    #     await state.set_state(Registration.user_first_name)
    #
    #
    # @router.message(Registration.user_first_name)
    # async def process_first_name(message: Message, state: FSMContext):
    #     await state.update_data(user_first_name=message.text)
    #     await state.set_state(Registration.user_last_name)  # –°–º–µ—Å—Ç–∏—Ç—å –≤ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é
    #     await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ, –∫—Ç–æ –∑–∞—â–∏—â–∞–ª –ª–∞–±—É')  # –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å
    #
    #
    # @router.message(Registration.user_last_name)
    # async def process_last_name(message: Message, state: FSMContext):
    #     await state.update_data(user_last_name=message.text)
    #     await state.set_state(Registration.extended_information)
    #     await message.answer('–°–∫–∏–¥—ã–≤–∞–π —Ç–∞–±–ª–∏—Ü—É')
    #
    #
    # @router.message(Registration.extended_information)
    # async def extended_information(message: Message, state: FSMContext):
    #     await state.update_data(extended_information=message.text)
    #
    #     data = await state.get_data()
    #
    #     # const –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    #     col_columns = 4
    #     number_surname = 0
    #     number_name = 1
    #     number_laba = 2
    #     number_want = 3
    #
    #     # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤
    #     list = []
    #     col_student = int(data['user_first_name'])
    #     was_the_last_person_to_respond = int(data['user_last_name'])
    #
    #     # –≤–≤–≤–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    #
    #     for i in range(0, col_student):
    #         list.append([])
    #         tmp = str(data['extended_information']).split()
    #         list[i].append(tmp[i * col_columns + number_surname])
    #         list[i].append(tmp[i * col_columns + number_name])
    #         list[i].append(int(tmp[i * col_columns + number_laba]))
    #         list[i].append(int(tmp[i * col_columns + number_want]))
    #     print("Success! all saved")
    #
    #     # –≤—ã—â–∏—Ç—ã–≤–∞–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–±
    #     average_number_of_labs = 0
    #     for i in range(0, col_student):
    #         average_number_of_labs += list[i][number_laba]
    #     average_number_of_labs /= col_student
    #     print("Average number of labs: ", average_number_of_labs)
    #
    #     # –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    #     mas_rez = []
    #     for i in range(0, col_student):
    #         if list[i][number_laba] < average_number_of_labs - 2 and list[i][number_want] == 1:
    #             mas_rez.append(list[i])
    #
    #     for i in range(0, col_student):
    #         number_for_check = (i + was_the_last_person_to_respond) % (col_student - 1)
    #         if (list[number_for_check][number_laba] >= average_number_of_labs - 2
    #                 and list[i][number_want] == 1):
    #             mas_rez.append(list[number_for_check])
    #
    #     for i in range(0, len(mas_rez)):
    #         print(f"{i}. {mas_rez[i][number_surname]} {mas_rez[i][number_name]} {mas_rez[i][number_laba]}")
    #     await message.answer()
    #     await state.clear()
    #     await message.answer('–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å, –ø–∏—à–∏ "/start"üòâ')
    #     # await rq.update_money()
    # # –ö–æ–Ω–µ—Ü —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è